from pyairtable import Api
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Airtable setup
AIRTABLE_PAT = os.getenv("AIRTABLE_PAT")
AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID")
TABLE_NAME = "Content Schedule"  # Or use Table ID like "tblXXXXXXXXXXXXXX"
airtable = Api(AIRTABLE_PAT).table(AIRTABLE_BASE_ID, TABLE_NAME)

def read_schedule():
    """Read all records from the Airtable schedule."""
    records = airtable.all()
    for record in records:
        fields = record['fields']
        print(f"Post: {fields.get('Post title', 'N/A')}, Status: {fields.get('Status', 'N/A')}, Date: {fields.get('Scheduled date', 'N/A')}")

def add_content(post_title, content_type, scheduled_date, content_link=None):
    new_record = {
        "Post title": post_title,
        "Content type": content_type,
        "Scheduled date": scheduled_date,  # ISO 8601, e.g., "2025-04-20T14:00:00.000Z"
        "Status": "Approved",
        "Draft link": content_link if content_link else "",
        "Notes": "Generated by AI Agent"
    }
    airtable.create(new_record)
    print(f"Added: {post_title}")

def update_status(record_id, new_status):
    """Update the status of an existing record."""
    updated_record = {"Status": new_status}
    airtable.update(record_id, updated_record)
    print(f"Updated record {record_id} to {new_status}")



if __name__ == "__main__":
    # Example usage
    # Read current schedule
    print("Current Schedule:")
    read_schedule()

    # Add a new post
    add_content(
        post_title="New AI Insights",
        content_type="Post",
        scheduled_date="2025-04-20T14:00:00.000Z",  # ISO format for Airtable
        content_link="https://example.com/newpost"
    )

    # Update status of a record (replace with actual record ID from Airtable)
    # update_status("recXXXXXXXXXXXXXX", "Scheduled")